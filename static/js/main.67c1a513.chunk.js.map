{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTranslate","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","result","tranlation","wrap","_context","prev","next","preventDefault","detectLanguagePromise","state","text","sent","JSON","stringify","console","log","setState","lang","language","confidence","t0","concat","stop","_x","apply","arguments","handleChange","event","target","value","languages","detectLanguage","DetectLanguage","key","ssl","promisify","detect","getLanguagesListPromise","_context2","_this2","react_default","createElement","className","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gbA6EeA,cAvEb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA0BFI,aA3Be,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KA2BA,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbN,EAAEO,iBADWH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGUpB,EAAKsB,sBAAsBtB,EAAKuB,MAAMC,MAHhD,OAGLT,EAHKG,EAAAO,KAILT,EAAaU,KAAKC,UAAUZ,GAClCa,QAAQC,IAAIb,GACZhB,EAAK8B,SAAS,CACZC,KAAMf,EAAW,GAAGgB,SACpBC,WAAYjB,EAAW,GAAGiB,aARjBf,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAWXlB,EAAK8B,SAAS,CACZC,KAAI,GAAAI,OAAAjB,EAAAgB,IACJD,WAAY,IAbH,yBAAAf,EAAAkB,SAAAvB,EAAAV,KAAA,aA3BA,gBAAAkC,GAAA,OAAA7B,EAAA8B,MAAAnC,KAAAoC,YAAA,GAAAvC,EA6CjBwC,aAAe,SAACC,GACdzC,EAAK8B,SAAS,CAACN,KAAMiB,EAAMC,OAAOC,SA5ChC3C,EAAKuB,MAAQ,CACXQ,KAAM,KACNE,WAAY,KACZW,UAAW,MAEb5C,EAAK6C,eAAiB,IAAIC,IAAe,CACvCC,IAAK,mCACLC,KAAK,IAEPhD,EAAKsB,sBAAwB2B,oBAAUjD,EAAK6C,eAAeK,QAC3DlD,EAAKmD,wBAA0BF,oBAAUjD,EAAK6C,eAAeD,WAZhD5C,4NAiBUG,KAAKgD,iCAApBpC,SACA6B,EAAYlB,KAAKC,UAAUZ,GACjCa,QAAQC,IAAIe,GACbzC,KAAK2B,SAAS,CAACc,8DAEdzC,KAAK2B,SAAS,CAACc,UAAS,GAAAT,OAAAiB,EAAAlB,kJA2BnB,IAAAmB,EAAAlD,KACP,OACEmD,EAAA3C,EAAA4C,cAAA,OAAKC,UAAU,OACbF,EAAA3C,EAAA4C,cAAA,8BACAD,EAAA3C,EAAA4C,cAAA,WACED,EAAA3C,EAAA4C,cAAA,wBACAD,EAAA3C,EAAA4C,cAAA,SAAOE,KAAK,OAAOC,SAAUvD,KAAKqC,eAClCc,EAAA3C,EAAA4C,cAAA,WACDD,EAAA3C,EAAA4C,cAAA,UAASI,QAAS,SAAC7C,GAAD,OAAOuC,EAAK9C,aAAaO,KAA3C,aAEAwC,EAAA3C,EAAA4C,cAAA,uBAND,IAMoBD,EAAA3C,EAAA4C,cAAA,gBAAQpD,KAAKoB,MAAMQ,MACtCuB,EAAA3C,EAAA4C,cAAA,yBAAiBpD,KAAKoB,MAAMU,aAE7BqB,EAAA3C,EAAA4C,cAAA,WACED,EAAA3C,EAAA4C,cAAA,kCACCpD,KAAKoB,MAAMqB,mBAjEJgB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAA3C,EAAA4C,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67c1a513.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport DetectLanguage from 'detectlanguage';\nimport { promisify } from 'es6-promisify'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      lang: null,\n      confidence: null,\n      languages: null,\n    }\n    this.detectLanguage = new DetectLanguage({\n      key: '9051af2d5487b4daef1426ecc7cd633f',\n      ssl: false\n  })\n    this.detectLanguagePromise = promisify(this.detectLanguage.detect);\n    this.getLanguagesListPromise = promisify(this.detectLanguage.languages);\n  }\n\n  async componentDidMount () {\n    try {\n      const result = await this.getLanguagesListPromise();\n      const languages = JSON.stringify(result)\n      console.log(languages)\n     this.setState({languages})\n    } catch(err) {\n      this.setState({languages: `${err}`})\n    }\n    \n  }\n\n  getTranslate = async (e) => {\n    e.preventDefault();\n    try {\n      const result = await this.detectLanguagePromise(this.state.text);\n      const tranlation = JSON.stringify(result)\n      console.log(tranlation);\n      this.setState({\n        lang: tranlation[0].language,\n        confidence: tranlation[0].confidence,\n      }) \n    } catch (err) {\n      this.setState({\n        lang: `${err}`,\n        confidence: 0,\n      })\n    }\n  }\n\nhandleChange = (event) => {\n  this.setState({text: event.target.value});\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Detect Language </h1>\n        <div>\n          <h5>Input text</h5>\n          <input type=\"text\" onChange={this.handleChange}></input>\n          <div>\n         <button  onClick={(e) => this.getTranslate(e)}>Proccess</button>\n          </div>\n         <h3>Language:</h3> <span> {this.state.lang}</span>\n         <h3>Confidence: {this.state.confidence}</h3>\n        </div>\n        <div>\n          <h2>Supported Languages:</h2>\n          {this.state.languages}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}